#### Card Lovelace
  # type: entities
  # title: Google
  # show_header_toggle: false
  # entities:
  #   - type: section
  #     label: ''
  #   - entity: input_boolean.google_switch
  #   - entity: input_boolean.tts_google_mode
  #   - entity: input_select.language
  #   - entity: input_select.notification_media_player_google
  # #  - entity: input_number.google_volume_storage
  #############################################################################

#######################################-#######################################
##                                 CUSTOMIZE                                   
#######################################-#######################################
homeassistant:
  customize:
    ################################################
    ## NODE ANCHORS
    ################################################
    package.node_anchors:
      customize: &customize
        package: 'Centro Notifiche'
        version: 'Google 0.9'
        author: 'Caio - www.hassiohelp.eu'

      expose: &expose
        <<: *customize
        haaska_hidden: false
        homebridge_hidden: false

    ################################################
    ## Device Tracker
    ################################################
    device_tracker.player_google:
      <<: *customize
      friendly_name: Tracker Player Google
      icon: mdi:animation-play
    ################################################
    ## input Boolean
    ################################################
    input_boolean.tts_google_mode:
      <<: *customize
    input_boolean.google_switch:
      <<: *customize
    ################################################
    ## input Number
    ################################################
    input_number.google_volume_storage:
      <<: *customize
    ################################################
    ## input Select
    ################################################
    input_select.notification_media_player_google:
      <<: *customize
    input_select.language:
      <<: *customize
    ################################################
    ## Sensor
    ################################################
    sensor.media_player_google:
      <<: *customize
    ################################################
    ## Script
    ################################################
    script.tts_google_translate_say_mode:
      <<: *customize
    script.tts_google_assistant_mode:
      <<: *customize
    ################################################
    ## Timer
    ################################################
    timer.volume_google:
      <<: *customize
#######################################-#######################################
##                                   GROUP
#######################################-#######################################
group:
  hub_google_config:
    name: Impostazioni Google
    entities:
     - input_boolean.google_switch
     - input_boolean.tts_google_mode
     - input_select.language
     - input_select.notification_media_player_google
     - input_number.google_volume_storage

#######################################-#######################################
##                                   INPUT
#######################################-#######################################
input_boolean:
  tts_google_mode:
    name: Google Say / Google Assistant
    icon: mdi:google

  google_switch:
    name: Google
    icon: mdi:google-home

input_number:
  google_volume_storage:
    name: Salva Volume Google
    icon: mdi:volume-high
    min: 0
    max: 1
    step: 0.1
    #initial: 0.2

input_select:
  #----------------------------------------------------------------------------------------------------#
  # Inserire i propri dispositivi GOOGLE con il proprio friandly_name o usare il file secret.yaml      #
  #----------------------------------------------------------------------------------------------------#
  notification_media_player_google:
    name: Sorgente Google
    icon: mdi:speaker-wireless
    options: !secret notification_media_player_google_hub

  language:
    name: Lingua
    options:
      - It
      - En
      - Fr
      - De
      - Nl

#######################################-#######################################
##                               DEVICE TRACKER
#######################################-#######################################
device_tracker:
  - platform: mqtt
    devices:
        player_google: 'hub/google'

#######################################-#######################################
##                                   TIMER
#######################################-#######################################
timer:
  volume_google:
    name: Volume timer delay google
    duration: 30

#######################################-#######################################
##                                 AUTOMATION
#######################################-#######################################
automation:
  - id: google_volume_restore_hub
    alias: Google Volume Restore
    initial_state: true
    hide_entity: true
    trigger:
      - platform: event
        event_type: timer.finished
        event_data:
          entity_id: timer.volume_google
    # condition:
    #   - condition: template
    #     value_template: >
    #       {{ is_state('input_boolean.google_switch', 'on') }}
    action:
      - service: media_player.volume_set
        data_template:
          entity_id: >
            {{ states('device_tracker.player_google') }}
          volume_level: >
            {{ states('input_number.google_volume_storage') | float | round(2) }}


  - id: mqtt_notifications_tts_google_hub
    alias: MQTT Notifications tts Google
    initial_state: true
    trigger:
      - platform: mqtt
        topic: "hub/setting"
    condition:
      - condition: template
        value_template: >-
          {{ trigger.payload != '' }}
      - condition: template
        value_template: >
          {{ trigger.payload_json.mute | length == 0 }}
      - condition: template
        value_template: >
          {{ is_state('input_boolean.google_switch', 'on') }}
      - condition: and
        conditions:
          - condition: or
            conditions:
              - condition: template
                value_template: >
                  {{ is_state('binary_sensor.dnd', 'off') }}
              - condition: state
                entity_id: input_boolean.priority_message
                state: 'on'
          - condition: state
            entity_id: input_boolean.speech_notifications
            state: 'on'
          - condition: or
            conditions:
              - condition: state
                entity_id: group.location_tracker
                state: 'home'
              - condition: state
                entity_id: input_boolean.guest_mode
                state: 'on'
    action:
      - service: mqtt.publish
        data_template:
          payload: >-
            {% if trigger.payload_json.media_player_google | length == 0 and states('sensor.media_player_google') | length == 0 %}
               all
            {% elif trigger.payload_json.media_player_google | length > 2 %}
              {{ trigger.payload_json.media_player_google }}
            {% else %}
              {{ states('sensor.media_player_google') }}
            {% endif %}
          topic: hub/google
          retain: true
      - service: input_boolean.turn_off
        data:
          entity_id:
            - input_boolean.last_message
            - input_boolean.priority_message

      - service: input_number.set_value
        data_template:
          entity_id: input_number.google_volume_storage
          value: >
            {% set ns = namespace(vol=0) %}
            {% if is_state('timer.volume', 'active') %}
              {% set ns.vol = states('input_number.google_volume_storage') | float | round(2) %}
            {% elif states('device_tracker.player_google').split(',')|count > 1 %}
            {% for x in states('device_tracker.player_google').split(',') %}
              {% set val = state_attr('media_player.' + x.split('.')[1], 'volume_level') | float | round(2) %}
              {% set ns.vol = val if val > ns.vol else ns.vol %}
            {% endfor %}
            {% else %}
              {% set ns.vol = state_attr(states('device_tracker.player_google'), 'volume_level') | float | round(2) %}
            {% endif %}
            {% set ns.vol = (states('input_number.default_restore_volume') | int / 100) if ns.vol == 0 else ns.vol %}
            {{ ns.vol }}
      - service_template: > # GOOGLE TTS/Assistant
          {% if is_state('input_boolean.tts_google_mode', 'on') %}
            script.tts_google_assistant_mode
          {% else %}
            script.tts_google_translate_say_mode
          {% endif %}
        data_template:
          message: >
            {{ trigger.payload_json.message }}

      - service: media_player.volume_set
        data_template:
          entity_id: >
            {{ states('device_tracker.player_google') }}
          volume_level: >
            {% if trigger.payload_json.volume | length == 0 %}
              {{ states('sensor.period_of_day_volume') }}
            {% else %}
              {{ trigger.payload_json.volume }}
            {% endif %}

      - service: timer.start
        data_template:
          entity_id: timer.volume_google
          duration: "00:00:{{states('sensor.last_message') | wordcount // 2+2 }}"

#######################################-#######################################
##                                  SCRIPT
#######################################-#######################################
script:
  #----------------------------------------------------------------------------------------------------#
  # Da Automazione MQTT Notifications tts Google - TTS Google Translate - #
  #----------------------------------------------------------------------------------------------------#
  tts_google_translate_say_mode:
    alias: Modo TTS Google Translate Say
    sequence:
      - service: tts.google_translate_say
        data_template:
          language: >
            {{ states('input_select.language') | lower }}
          entity_id: >
            {{ states('device_tracker.player_google') }}
          message: >-
            {{ message }}
  #----------------------------------------------------------------------------------------------------#
  # Da Automazione MQTT Notifications tts Google - Google Assistant Web Server - #
  #----------------------------------------------------------------------------------------------------#
  tts_google_assistant_mode:
    alias: Modo TTS Google Assistant
    sequence:
      - service: notify.google_assistant_command
        data_template:
          message: >-
            di a tutti {{ message }}

#######################################-#######################################
##                                  SENSOR
#######################################-#######################################
sensor:
  - platform: template
    sensors:
      media_player_google:
        friendly_name: 'Player Google Attivo'
        entity_id:
          - input_select.notification_media_player_google
        value_template: >
          {% set domains = ['media_player','group'] -%}
          {% for x in states if x.domain in domains and x.name|lower == states('input_select.notification_media_player_google')|lower -%}
          {% if x.domain == 'group' %}
          {{- x.attributes.entity_id | join(', ') -}}
          {% else %}
          {{- x.entity_id -}}
          {% endif %}
          {% endfor %}
        icon_template: >-
          {% set domains = ['media_player','group'] -%}
          {% for x in states if x.domain in domains and x.name|lower == states('input_select.notification_media_player_google')|lower -%}
          {% if x.domain == 'group' %}
          mdi:speaker-multiple
          {% else %}
          mdi:speaker
          {% endif %}
          {% endfor %}