#######################################-#######################################
##                                 CUSTOMIZE                                   
#######################################-#######################################
homeassistant:
  customize:
    ################################################
    ## NODE ANCHORS
    ################################################
    package.node_anchors:
      customize: &customize
        package: 'Centro Notifiche'
        version: 'Google 1.2'
        author: 'Caio - www.hassiohelp.eu'

      expose: &expose
        <<: *customize
        haaska_hidden: false
        homebridge_hidden: false

  ## Automation
    automation.google_volume_restore_hub:
      <<: *customize
      friendly_name: 'Ripristino Volume Google'
    automation.event_notifications_tts_google_hub:
      <<: *customize
      friendly_name: 'Evento notifica TTS Google'

  ## input
    input_boolean.tts_google_mode:
      <<: *customize
    input_boolean.google_switch:
      <<: *customize
    input_number.google_volume_storage:
      <<: *customize
    input_select.notification_media_player_google:
      <<: *customize
    input_select.language:
      <<: *customize
    input_text.player_google:
      <<: *customize
      friendly_name: Tracker Player Google
      icon: mdi:animation-play

  ## Sensor
    sensor.media_player_google:
      <<: *customize

  ## Script
    script.tts_google_translate_say_mode:
      <<: *customize
    script.tts_google_assistant_mode:
      <<: *customize

  ## Timer
    timer.volume_google:
      <<: *customize

#######################################-#######################################
##                                   INPUT
#######################################-#######################################
input_boolean:
  tts_google_mode:
    name: Google Say / Google Assistant
    icon: mdi:google

  google_switch:
    name: Google
    icon: mdi:google-home

input_number:
  google_volume_storage:
    name: Salva Volume Google
    icon: mdi:volume-high
    min: 0
    max: 1
    step: 0.1

input_select:
  #----------------------------------------------------------------------------------------------------#
  # Inserire i propri dispositivi GOOGLE con il proprio friandly_name o usare il file secret.yaml      #
  #----------------------------------------------------------------------------------------------------#
  notification_media_player_google:
    name: Sorgente Google
    icon: mdi:speaker-wireless
    options: !secret notification_media_player_google_hub

  language:
    name: Lingua
    options:
      - It
      - En
      - Fr
      - De
      - Nl

input_text:
  player_google:
    name: Tracker Player Google

#######################################-#######################################
##                                   TIMER
#######################################-#######################################
timer:
  volume_google:
    name: Volume timer delay google
    duration: 30

#######################################-#######################################
##                                 AUTOMATION
#######################################-#######################################
automation:
#1-----------------------------------------------------------------------------------------------------#
  # VOLUME RESTORE
  #----------------------------------------------------------------------------------------------------#
  - id: google_volume_restore_hub
    alias: Google Volume Restore
    initial_state: true
    hide_entity: true
    trigger:
      - platform: event
        event_type: timer.finished
        event_data:
          entity_id: timer.volume_google
    # condition:
    action:
      - service: media_player.volume_set
        data_template:
          entity_id: >
            {{ states('input_text.player_google') }}
          volume_level: >
            {{ states('input_number.google_volume_storage') | float | round(2) }}
      # - service: timer.cancel
      #   entity_id: timer.volume_google
#2-----------------------------------------------------------------------------------------------------#
  # EVENTO TTS
  #----------------------------------------------------------------------------------------------------#
  - id: event_notifications_tts_google_hub
    alias: event_notifications_tts_google_hub
    initial_state: true
    trigger:
      - platform: event
        event_type: hub
    condition:
      - condition: template
        value_template: >
          {{ trigger.event.data.mute | length == 0 }}
      - condition: template
        value_template: >
          {{ is_state('input_boolean.google_switch', 'on') }}
      - condition: and
        conditions:
          - condition: or
            conditions:
              - condition: template
                value_template: >
                  {{ is_state('binary_sensor.dnd', 'off') }}
              - condition: state
                entity_id: input_boolean.priority_message
                state: 'on'
          - condition: state
            entity_id: input_boolean.speech_notifications
            state: 'on'
          - condition: or
            conditions:
              - condition: state
                entity_id: group.location_tracker
                state: 'home'
              - condition: state
                entity_id: input_boolean.guest_mode
                state: 'on'
    action:
      - service: input_text.set_value
        data_template:
          entity_id: input_text.player_google
          value: >-
            {% if trigger.event.data.media_player_google | length == 0 and states('sensor.media_player_google') | length == 0 %}
               all
            {% elif trigger.event.data.media_player_google | length > 2 %}
              {{ trigger.event.data.media_player_google }}
            {% else %}
              {{ states('sensor.media_player_google') }}
            {% endif %}

      - service: input_boolean.turn_off
        data:
          entity_id:
            - input_boolean.last_message
            - input_boolean.priority_message

      - service: media_player.turn_on
        data_template:
          entity_id: >
            {{ states('input_text.player_google') }}

      - service: input_number.set_value
        data_template:
          entity_id: input_number.google_volume_storage
          value: >
            {% set ns = namespace(vol=0) %}
            {% if is_state('timer.volume', 'active') %}
              {% set ns.vol = states('input_number.google_volume_storage') | float | round(2) %}
            {% elif states('input_text.player_google').split(',')|count > 1 %}
            {% for x in states('input_text.player_google').split(',') %}
              {% set val = state_attr('media_player.' + x.split('.')[1], 'volume_level') | float | round(2) %}
              {% set ns.vol = val if val > ns.vol else ns.vol %}
            {% endfor %}
            {% else %}
              {% set ns.vol = state_attr(states('input_text.player_google'), 'volume_level') | float | round(2) %}
            {% endif %}
            {% set ns.vol = (states('input_number.default_restore_volume') | int / 100) if ns.vol == 0 else ns.vol %}
            {{ ns.vol }}

      - service_template: > # GOOGLE TTS/Assistant
          {% if is_state('input_boolean.tts_google_mode', 'on') %}
            script.tts_google_assistant_mode
          {% else %}
            script.tts_google_translate_say_mode
          {% endif %}
        data_template:
          message: >
            {{ trigger.event.data.message_tts if trigger.event.data.message_tts else trigger.event.data.message }}

      - service: media_player.volume_set
        data_template:
          entity_id: >
            {{ states('input_text.player_google') }}
          volume_level: >
            {% if trigger.event.data.volume | length == 0 %}
              {{ states('sensor.period_of_day_volume') }}
            {% else %}
              {{ trigger.event.data.volume }}
            {% endif %}

      - service: timer.start
        data_template:
          entity_id: timer.volume_google
          duration: >-
            {{((trigger.event.data.message_tts if trigger.event.data.message_tts else trigger.event.data.message) | wordcount // 2+3)}}

      # - wait_template: >-
      #     {{ not is_state(states('input_text.player_google'), 'playing') }}

#######################################-#######################################
##                                  SCRIPT
#######################################-#######################################
script:
#1-----------------------------------------------------------------------------------------------------#
  # Da automation.event_notifications_tts_google_hub - TTS Google Translate
  #----------------------------------------------------------------------------------------------------#
  tts_google_translate_say_mode:
    alias: Modo TTS Google Translate Say
    sequence:
      - service: tts.google_translate_say
        data_template:
          language: >
            {{ states('input_select.language') | lower }}
          entity_id: >
            {{ states('input_text.player_google') }}
          message: >-
            {{ message | replace('\n','') | replace('   ',' ') | replace('  ',' ') }}
          

#2-----------------------------------------------------------------------------------------------------#
  # Da event_notifications_tts_google_hub - Google Assistant Web Server
  # Addons Usato in questa versione (64-bit AMD) lo trovi qui https://github.com/marcelveldt/hassio-addons-repo
  #----------------------------------------------------------------------------------------------------#
  tts_google_assistant_mode:
    alias: Modo TTS Google Assistant
    sequence:
      - service: notify.google_assistant
        data_template:
          message: >-
            {{ message | replace('\n','') | replace('   ',' ') | replace('  ',' ') }}

#######################################-#######################################
##                                  SENSOR
#######################################-#######################################
sensor:
  - platform: template
    sensors:
      media_player_google:
        friendly_name: 'Player Google Attivo'
        entity_id:
          - input_select.notification_media_player_google
        value_template: >
          {% set domains = ['media_player','group'] -%}
          {% for x in states if x.domain in domains and x.name|lower == states('input_select.notification_media_player_google')|lower -%}
          {% if x.domain == 'group' %}
          {{- x.attributes.entity_id | join(', ') -}}
          {% else %}
          {{- x.entity_id -}}
          {% endif %}
          {% endfor %}
        icon_template: >-
          {% set domains = ['media_player','group'] -%}
          {% for x in states if x.domain in domains and x.name|lower == states('input_select.notification_media_player_google')|lower -%}
          {% if x.domain == 'group' %}
          mdi:speaker-multiple
          {% else %}
          mdi:speaker
          {% endif %}
          {% endfor %}
